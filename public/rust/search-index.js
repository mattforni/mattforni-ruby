var searchIndex = {};
searchIndex['args'] = {"items":[[0,"","args","",null,null],[3,"ArgsError","","An implementation of `Error` which may or may not include a scope and/or usage message.",null,null],[3,"OrderValidation","","An implementation of `Validation` which tests whether or not a value adheres\nto the provided `order` and `bound`. It should be noted that the type of\n`bound`, `O`, must implement `Clone`, `Display` **and** `PartialOrd`.",null,null],[3,"Args","","A dead simple implementation of command line argument parsing and validation.",null,null],[4,"Order","","The relationship to use when validating an `OrderValidation`.",null,null],[13,"GreaterThan","","Represents a strictly greater than relationship.",0,null],[13,"GreaterThanOrEqual","","Represents a greater than relationship that allows equality.",0,null],[13,"LessThan","","Represents a strictly less than relationship.",0,null],[13,"LessThanOrEqual","","Represents a less than relationship that allows equality.",0,null],[11,"new","","Creates a new `ArgsError` with the provided `scope` and `msg`.\nIf `scope` is an empty string (i.e. `\"\"`) it will be ignored.",1,{"inputs":[{"name":"argserror"},{"name":"str"},{"name":"str"}],"output":{"name":"argserror"}}],[11,"new_with_usage","","Creates a new `ArgsError` with the provided `scope`, `msg` and `usage` message.\nIf either `scope` or `usage` are an empty string (i.e. `\"\"`) they will be ignored.",1,{"inputs":[{"name":"argserror"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"argserror"}}],[11,"fmt","","",1,{"inputs":[{"name":"argserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"argserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"argserror"}],"output":{"name":"str"}}],[11,"compare","","Compares the provided `value` to the provided `bound`",0,{"inputs":[{"name":"order"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"order"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `OrderValidation` with the provided `order` and `bound`.",2,{"inputs":[{"name":"ordervalidation"},{"name":"order"},{"name":"o"}],"output":{"name":"ordervalidation"}}],[11,"error","","",2,{"inputs":[{"name":"ordervalidation"},{"name":"o"}],"output":{"name":"argserror"}}],[11,"is_valid","","",2,{"inputs":[{"name":"ordervalidation"},{"name":"o"}],"output":{"name":"bool"}}],[8,"Validation","","A trait designed to provide validation for command line argument parsing.",null,null],[16,"T","","The `type` (e.g. `i32`, `String`, etc.) to which the validation is applied.",3,null],[10,"error","","Returns an `ArgsError` describing the invalid state for the provided `value`.",3,{"inputs":[{"name":"validation"},{"name":"t"}],"output":{"name":"argserror"}}],[10,"is_valid","","Returns a `bool` indicating if the `Validation` passes for the provided `value`.",3,{"inputs":[{"name":"validation"},{"name":"t"}],"output":{"name":"bool"}}],[11,"is_invalid","","Returns a `bool` indicating if the `Validation` fails for the provided `value`.",3,{"inputs":[{"name":"validation"},{"name":"t"}],"output":{"name":"bool"}}],[8,"HasArgs","","A trait designed to bind arguments and convenience methods to a struct.",null,null],[10,"args","","Returns a mutable references to an `Args` struct.",4,{"inputs":[{"name":"hasargs"}],"output":{"name":"args"}}],[11,"full_usage","","Acts as a convenience method for calling the `Args` implementation.",4,{"inputs":[{"name":"hasargs"},{"name":"str"}],"output":{"name":"string"}}],[11,"has_value","","Acts as a convenience method for calling the `Args` implementation.",4,{"inputs":[{"name":"hasargs"},{"name":"str"}],"output":{"name":"bool"}}],[11,"parse","","Acts as a convenience method for calling the `Args` implementation.",4,{"inputs":[{"name":"hasargs"},{"name":"c"}],"output":{"name":"result"}}],[11,"parse_from_cli","","Acts as a convenience method for calling the `Args` implementation.",4,{"inputs":[{"name":"hasargs"}],"output":{"name":"result"}}],[11,"short_usage","","Acts as a convenience method for calling the `Args` implementation.",4,{"inputs":[{"name":"hasargs"}],"output":{"name":"string"}}],[11,"usage","","Acts as a convenience method for calling the `Args` implementation.",4,{"inputs":[{"name":"hasargs"},{"name":"str"}],"output":{"name":"string"}}],[11,"validated_value_of","","Acts as a convenience method for calling the `Args` implementation.",4,null],[11,"value_of","","Acts as a convenience method for calling the `Args` implementation.",4,{"inputs":[{"name":"hasargs"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates an empty set of command line options.",5,{"inputs":[{"name":"args"},{"name":"str"}],"output":{"name":"args"}}],[11,"flag","","Registers an optional flag argument that does not take an argument and defaults to false.",5,{"inputs":[{"name":"args"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"args"}}],[11,"full_usage","","Generates a combination of the short and verbose usage messages.",5,{"inputs":[{"name":"args"},{"name":"str"}],"output":{"name":"string"}}],[11,"has_value","","Returns a `bool` indicating whether or not a argument is present.",5,{"inputs":[{"name":"args"},{"name":"str"}],"output":{"name":"bool"}}],[11,"option","","Registers an option explicitly.",5,{"inputs":[{"name":"args"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"occur"},{"name":"option"}],"output":{"name":"args"}}],[11,"parse","","Parses arguments according to the registered options.",5,{"inputs":[{"name":"args"},{"name":"c"}],"output":{"name":"result"}}],[11,"parse_from_cli","","Parses arguments directly from the command line according to the registered options.",5,{"inputs":[{"name":"args"}],"output":{"name":"result"}}],[11,"short_usage","","Generates a one-line usage summary from the registered options.",5,{"inputs":[{"name":"args"}],"output":{"name":"string"}}],[11,"usage","","Generates a verbose usage summary from the registered options.",5,{"inputs":[{"name":"args"},{"name":"str"}],"output":{"name":"string"}}],[11,"validated_value_of","","Retrieves the value of the `Opt` identified by `opt_name`, casts it to\nthe type specified by `T` and then runs all provided `Validation`s.",5,null],[11,"value_of","","Retrieves the value of the `Opt` identified by `opt_name` and casts it to\nthe type specified by `T`.",5,{"inputs":[{"name":"args"},{"name":"str"}],"output":{"name":"result"}}],[11,"full_usage","","Acts as a convenience method for calling the `Args` implementation.",4,{"inputs":[{"name":"hasargs"},{"name":"str"}],"output":{"name":"string"}}],[11,"has_value","","Acts as a convenience method for calling the `Args` implementation.",4,{"inputs":[{"name":"hasargs"},{"name":"str"}],"output":{"name":"bool"}}],[11,"parse","","Acts as a convenience method for calling the `Args` implementation.",4,{"inputs":[{"name":"hasargs"},{"name":"c"}],"output":{"name":"result"}}],[11,"parse_from_cli","","Acts as a convenience method for calling the `Args` implementation.",4,{"inputs":[{"name":"hasargs"}],"output":{"name":"result"}}],[11,"short_usage","","Acts as a convenience method for calling the `Args` implementation.",4,{"inputs":[{"name":"hasargs"}],"output":{"name":"string"}}],[11,"usage","","Acts as a convenience method for calling the `Args` implementation.",4,{"inputs":[{"name":"hasargs"},{"name":"str"}],"output":{"name":"string"}}],[11,"validated_value_of","","Acts as a convenience method for calling the `Args` implementation.",4,null],[11,"value_of","","Acts as a convenience method for calling the `Args` implementation.",4,{"inputs":[{"name":"hasargs"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_invalid","","Returns a `bool` indicating if the `Validation` fails for the provided `value`.",3,{"inputs":[{"name":"validation"},{"name":"t"}],"output":{"name":"bool"}}]],"paths":[[4,"Order"],[3,"ArgsError"],[3,"OrderValidation"],[8,"Validation"],[8,"HasArgs"],[3,"Args"]]};
initSearch(searchIndex);
